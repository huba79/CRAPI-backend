/**
 * NOTE: This class is auto generated by the swagger code generator program (3.0.27).
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */
package io.swagger.api;

import org.threeten.bp.OffsetDateTime;
import io.swagger.model.Reservations;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import io.swagger.v3.oas.annotations.responses.ApiResponses;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.media.ArraySchema;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RequestPart;
import org.springframework.web.multipart.MultipartFile;
import org.springframework.web.bind.annotation.CookieValue;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
import java.util.Map;

@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.SpringCodegen", date = "2021-11-30T08:17:32.900Z[GMT]")
@Validated
public interface ReservationsApi {

    @Operation(summary = "Adds a new reservation", description = "Saves a new  reservation to the system", security = {
        @SecurityRequirement(name = "ApiKeyAuth")    }, tags={ "users", "operators", "managers" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "201", description = "Succesfully created", content = @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = Reservations.class)))),
        
        @ApiResponse(responseCode = "400", description = "Invalid request"),
        
        @ApiResponse(responseCode = "500", description = "Server error") })
    @RequestMapping(value = "/reservations/",
        produces = { "application/json" }, 
        consumes = { "application/json" }, 
        method = RequestMethod.POST)
    ResponseEntity<Reservations> addReservation(@Parameter(in = ParameterIn.DEFAULT, description = "", schema=@Schema()) @Valid @RequestBody Reservations body);


    @Operation(summary = "Deletes a reservation by id", description = "Deletes a reservation from the system", security = {
        @SecurityRequirement(name = "ApiKeyAuth")    }, tags={ "users", "operators", "managers" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "204", description = "Succesfully deleted"),
        
        @ApiResponse(responseCode = "400", description = "Invalid request"),
        
        @ApiResponse(responseCode = "404", description = "Not Found"),
        
        @ApiResponse(responseCode = "500", description = "Server error") })
    @RequestMapping(value = "/reservations/{id}",
        method = RequestMethod.DELETE)
    ResponseEntity<Void> deleteReservation(@Parameter(in = ParameterIn.PATH, description = "", required=true, schema=@Schema()) @PathVariable("id") Long id);


    @Operation(summary = "Gets reservation by id", description = "Queries a reservation from the system", security = {
        @SecurityRequirement(name = "ApiKeyAuth")    }, tags={ "users", "operators", "managers" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "Reservation retrieved succesfully", content = @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = Reservations.class)))),
        
        @ApiResponse(responseCode = "400", description = "invalid request"),
        
        @ApiResponse(responseCode = "404", description = "Not Found"),
        
        @ApiResponse(responseCode = "500", description = "Server error") })
    @RequestMapping(value = "/reservations/{id}",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<Reservations> getReservation(@Parameter(in = ParameterIn.PATH, description = "", required=true, schema=@Schema()) @PathVariable("id") Long id);


    @Operation(summary = "Updates a reservation", description = "Updates an existing reservation to the system", security = {
        @SecurityRequirement(name = "ApiKeyAuth")    }, tags={ "users", "operators", "managers" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "201", description = "Reservation created", content = @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = Reservations.class)))),
        
        @ApiResponse(responseCode = "400", description = "Invalid request"),
        
        @ApiResponse(responseCode = "500", description = "Server error") })
    @RequestMapping(value = "/reservations/{id}",
        produces = { "application/json" }, 
        consumes = { "application/json" }, 
        method = RequestMethod.PUT)
    ResponseEntity<Reservations> updateReservation(@Parameter(in = ParameterIn.PATH, description = "", required=true, schema=@Schema()) @PathVariable("id") Long id, @Parameter(in = ParameterIn.DEFAULT, description = "", schema=@Schema()) @Valid @RequestBody Reservations body);

    
    @Operation(summary = "Gets filtered reservations list", description = "Gets filtered reservations list filtered by params", security = {
        @SecurityRequirement(name = "ApiKeyAuth")    }, tags={ "users", "operators", "managers" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "Reservations retrieved succesfully", content = @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = Reservations.class)))),
        
        @ApiResponse(responseCode = "400", description = "Bad request"),
        
        @ApiResponse(responseCode = "401", description = "Unauthorized access"),
        
        @ApiResponse(responseCode = "500", description = "Server error") })
    @RequestMapping(value = "/reservations/",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<List<Reservations>> getReservationsByUserId(@Parameter(in = ParameterIn.QUERY, description = "" ,schema=@Schema()) @Valid @RequestParam(value = "userId", required = false) Long userId);

}

